name: portfolio
services:
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    restart: on-failure
    networks:
      - client-side
      - caddy
    labels:
      caddy: ${HOSTNAME}
      caddy.reverse_proxy: "{{upstreams 3000}}"
    depends_on:
      - api

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    restart: on-failure
    networks:
      - client-side
      - server-side
      - caddy
    labels:
      caddy: ${HOSTNAME}
      caddy.rewrite: "/api /api/"
      caddy.handle_path: "/api/*"
      caddy.handle_path.reverse_proxy: "{{upstreams 4000}}"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:14-alpine
    restart: always
    user: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=portfolio
    networks:
      - server-side
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d portfolio -U ${POSTGRES_USER}"]
      interval: 3s
      timeout: 5s
      retries: 5

networks:
  client-side: {}
  server-side: {}
  caddy:
    external: true

volumes:
  db-data: {}
